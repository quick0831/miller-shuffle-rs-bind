use std::ffi::{c_uint, c_short, c_ulong};

extern "C" {
    pub fn MillerShuffleAlgo_d(inx: c_uint, shuffleID: c_uint, listSize: c_uint) -> c_uint;
    pub fn MillerShuffleAlgo_e(inx: c_uint, shuffleID: c_uint, listSize: c_uint) -> c_uint;
    pub fn MillerShuffleAlgo_b(inx: c_uint, shuffleID: c_uint, listSize: c_uint) -> c_uint;
    pub fn MillerShuffle_xlite(inx: c_short, mixID: c_ulong, nlim: c_short) -> c_short;
    pub fn MillerShuffle_lite(inx: c_short, mixID: c_ulong, nlim: c_short) -> c_short;
    pub fn DDeckShuffle(inx: c_uint, shuffleID: c_uint, listSize: c_uint) -> c_uint;
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_algo_d() {
        let ans = [
            [16, 31, 29, 41, 44, 45, 15, 13, 10, 7, 49, 27, 40, 47, 33, 51, 20, 9, 11, 3, 35, 50, 1, 17, 34, 37, 26, 8, 48, 0, 25, 14, 39, 18, 5, 42, 6, 4, 2, 28, 24, 32, 21, 46, 43, 38, 12, 22, 19, 36, 30, 23],
            [24, 1, 48, 26, 38, 8, 32, 15, 7, 11, 46, 0, 14, 12, 44, 30, 28, 18, 22, 43, 31, 39, 10, 17, 4, 16, 6, 34, 19, 27, 33, 45, 25, 36, 9, 37, 23, 20, 2, 29, 51, 47, 13, 21, 49, 40, 41, 5, 3, 35, 50, 42],
            [20, 13, 29, 35, 51, 3, 34, 31, 30, 17, 0, 11, 15, 49, 33, 25, 47, 45, 10, 41, 6, 7, 24, 27, 19, 16, 37, 18, 9, 32, 38, 26, 39, 8, 44, 22, 23, 36, 48, 50, 5, 12, 14, 46, 43, 40, 42, 2, 28, 4, 1, 21],
            [43, 5, 12, 42, 32, 44, 30, 10, 46, 8, 40, 11, 15, 33, 28, 26, 22, 48, 1, 14, 36, 18, 4, 39, 24, 16, 37, 35, 51, 0, 47, 49, 27, 45, 41, 2, 38, 20, 17, 3, 31, 29, 19, 25, 7, 13, 21, 6, 34, 23, 50, 9],
            [32, 1, 18, 47, 7, 5, 46, 9, 45, 29, 12, 23, 27, 43, 42, 11, 26, 15, 22, 25, 41, 19, 13, 33, 31, 16, 40, 30, 28, 14, 50, 6, 3, 20, 17, 24, 35, 48, 8, 10, 4, 34, 37, 38, 51, 0, 21, 44, 49, 39, 36, 2],
            [40, 21, 34, 23, 17, 4, 48, 44, 16, 37, 3, 7, 30, 10, 24, 42, 22, 8, 38, 2, 6, 13, 27, 9, 35, 20, 49, 46, 18, 12, 25, 33, 39, 41, 47, 14, 15, 43, 29, 50, 32, 51, 5, 1, 19, 0, 45, 11, 26, 36, 28, 31],
            [35, 27, 45, 48, 11, 41, 20, 9, 40, 37, 36, 23, 31, 17, 49, 3, 15, 5, 29, 51, 16, 47, 12, 10, 30, 24, 1, 13, 26, 0, 25, 14, 44, 8, 21, 42, 50, 4, 6, 18, 2, 32, 39, 46, 7, 28, 22, 19, 43, 38, 34, 33],
            [44, 4, 46, 22, 6, 31, 26, 51, 5, 24, 40, 2, 34, 8, 42, 9, 48, 20, 16, 10, 3, 28, 45, 12, 7, 41, 38, 37, 35, 30, 49, 14, 27, 32, 25, 43, 39, 17, 0, 13, 15, 1, 29, 18, 47, 11, 36, 23, 33, 19, 50, 21],
            [11, 48, 44, 33, 1, 27, 36, 6, 31, 15, 16, 9, 50, 29, 46, 23, 49, 43, 17, 47, 35, 20, 40, 34, 26, 13, 22, 10, 45, 24, 21, 5, 39, 0, 12, 14, 2, 18, 41, 42, 7, 4, 25, 28, 32, 37, 8, 38, 30, 51, 3, 19],
            [2, 25, 36, 51, 4, 43, 0, 30, 18, 9, 12, 5, 49, 1, 26, 32, 46, 16, 48, 34, 23, 50, 37, 33, 47, 29, 13, 42, 27, 20, 44, 38, 3, 8, 17, 35, 19, 40, 45, 21, 7, 24, 6, 31, 14, 15, 39, 11, 28, 41, 22, 10],
            [30, 1, 25, 47, 35, 34, 18, 9, 16, 29, 36, 44, 3, 43, 21, 37, 39, 23, 46, 6, 40, 20, 41, 15, 7, 48, 17, 10, 26, 33, 22, 38, 12, 0, 45, 51, 11, 28, 50, 42, 2, 4, 32, 5, 31, 14, 49, 19, 27, 13, 8, 24],
            [22, 27, 42, 34, 24, 43, 4, 37, 50, 35, 15, 2, 12, 47, 32, 38, 20, 19, 9, 18, 23, 40, 39, 6, 51, 36, 13, 25, 16, 21, 41, 28, 3, 44, 11, 10, 31, 46, 45, 1, 49, 7, 0, 30, 5, 48, 14, 17, 8, 33, 26, 29],
            [33, 7, 41, 2, 18, 21, 4, 15, 10, 12, 9, 29, 42, 49, 24, 22, 46, 36, 27, 50, 47, 35, 13, 26, 14, 40, 0, 1, 48, 16, 23, 30, 51, 45, 17, 6, 38, 20, 28, 11, 19, 43, 37, 34, 3, 31, 32, 25, 8, 44, 5, 39],
            [20, 40, 32, 35, 34, 5, 28, 27, 21, 8, 42, 15, 10, 41, 7, 11, 39, 25, 1, 46, 26, 12, 29, 48, 43, 17, 31, 13, 19, 14, 33, 50, 22, 16, 9, 6, 23, 45, 3, 24, 30, 36, 18, 2, 44, 37, 38, 51, 49, 4, 0, 47],
            [47, 22, 38, 27, 39, 21, 49, 32, 15, 9, 24, 3, 44, 42, 40, 14, 35, 28, 1, 0, 19, 4, 33, 18, 20, 41, 16, 46, 34, 8, 5, 7, 30, 36, 29, 50, 48, 51, 6, 23, 43, 17, 10, 37, 25, 31, 2, 12, 11, 45, 26, 13],
            [16, 40, 38, 13, 32, 39, 21, 35, 46, 23, 14, 26, 12, 44, 5, 33, 19, 15, 45, 11, 47, 43, 9, 30, 31, 25, 37, 0, 51, 17, 6, 50, 27, 18, 41, 34, 29, 10, 8, 49, 2, 36, 48, 28, 42, 20, 1, 7, 4, 3, 24, 22],
        ];
        for (j, list) in ans.iter().enumerate() {
            for (i, idx_ans) in list.iter().enumerate() {
                let i = i.try_into().unwrap();
                let j = j.try_into().unwrap();
                let idx: i32 = unsafe { MillerShuffleAlgo_d(i, j, 52) }.try_into().unwrap();
                assert_eq!(idx, *idx_ans);
            }
        }
    }
}
